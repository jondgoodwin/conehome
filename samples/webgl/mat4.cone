struct Mat4
	mat [16]f32
	
	fn identity(self &mut)
		mat[0] = mat[5] = mat[10] = mat[15] = 1.
		mat[1] = mat[2] = mat[3] = 0.
		mat[4] = mat[6] = mat[7] = 0.
		mat[8] = mat[9] = mat[11] = 0.
		mat[12] = mat[13] = mat[14] = 0.

	fn translate(self &mut, x f32, y f32, z f32)
		mat[12]=x;
		mat[13]=y;
		mat[14]=z;

	fn rotate(self &mut, angle f32, x f32, y f32, z f32)
		imm cosa = angle.cos
		imm sina = angle.sin
		mat[ 0] = cosa + x * x * (1. - cosa)
		mat[ 1] = y * x * (1. - cosa) + x * sina
		mat[ 2] = z * x * (1. - cosa) - y * sina
		mat[ 3] = 0.0f
		mat[ 4] = x * y * (1. - cosa) - x * sina
		mat[ 5] = cosa + y * y * (1 - cosa)
		mat[ 6] = x * y * (1. - cosa) + x * sina
		mat[ 7] = 0.0f
		mat[ 8] = x * z * (1. - cosa) + y * sina
		mat[ 9] = y * z * (1. - cosa) - x * sina
		mat[10] = cosa + z * z * (1. - cosa)
		mat[11] = 0.
		mat[12] = 0.
		mat[13] = 0.
		mat[14] = 0.
		mat[15] = 1.

	fn perspective(self &mut, fov f32, aspratio f32, near f32, far f32)
		imm halffov = fov * 3.1415926535 / 360.0
		imm tanhalffov = halffov.sin / halffov.cos
		mat[1] = mat[2] = mat[3] = 0.0
		mat[4] = mat[6] = mat[7] = 0.0
		mat[8] = mat[9] = 0.0
		mat[12] = mat[13] = mat[15] = 0.0;

		mat[0] = 1.0/(tanhalffov * aspratio);
		mat[5] = 1.0/tanhalffov;
		mat[10] = (far+near)/(near-far);
		mat[11] = -1.0;
		mat[14] = 2.0*far*near/(near-far); 

