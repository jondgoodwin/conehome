#!/usr/bin/env python3

# Build tool for a Cone program
# (Future Direction is an executable program.
#  see https://github.com/ponylang/ponyc/blob/master/src/libponyc/codegen/genexe.c#L404

import os
import sys
from subprocess import call

conehome = os.environ['CONEHOME']

# Operating system-specific configuration
if sys.platform.startswith('linux'):
  osname = 'linux'
  cpu = 'x64'
  objext = '.o'
  exeext = ''
elif sys.platform.startswith('win'):
  osname = 'win'
  cpu = 'x86'
  objext = '.obj'
  exeext = '.exe'
  # Should be retrieved from registry
  # https://github.com/ponylang/ponyc/blob/master/src/libponyc/platform/vcvars.c
  mstoolbin = 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\bin\\Hostx86\\x86\\'
  msvcincl = 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\include'
  msucrtinc = 'C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.17134.0\\ucrt'
  msucrtlib = 'C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.17134.0\\ucrt\\x86\\ucrt.lib'
  msvclib = '/LIBPATH:C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Tools\\MSVC\\14.14.26428\\lib\\x86\\'
  msumlib = '/LIBPATH:C:\\Program Files (x86)\\Windows Kits\\10\\Lib\\10.0.17134.0\\um\\x86\\'
else:
   print("Unsupported operating system")
   sys.exit(1)

# Obtain project name
sep = '\\' if osname == 'win' else '/'
project = os.getcwd().split(sep)[-1]

# Determine desired build configuration
if len(sys.argv) > 1:
  config = sys.argv[1]
else:
  config = 'release'

# Establish build directory and ensure it exists
if config == 'release':
  builddir = 'release'
elif config == 'debug':
  builddir = 'debug'
elif config == 'web':
  builddir = 'public'
else:
  print("Unknown configuration: " + config)
  sys.exit(1)
if not os.path.exists(builddir):
  os.mkdir(builddir)
objlist = []

# Compile Cone program
if os.path.exists('main.cone'):
	pgm = 'main'
	if config == 'release':
	  compopt = []
	elif config == 'debug':
	  compopt = ['-d', '--ir', '--asm', '--llvmir']
	elif config == 'web':
	  compopt = ['--wasm']
	rc = call(["conec"] + compopt + ["-o"+builddir, pgm])
	if rc != 0:
	  sys.exit(rc)
	objlist.append(os.path.join(builddir, pgm + objext))
	pkg = 'conert'
	pkgpath = os.path.join(os.path.join(conehome, "packages"), pkg)
	if osname == 'win':
	  libname = pkg+'.lib'
	else:
	  libname = 'lib'+pkg+'.a'
	objlist.append(os.path.join(os.path.join(pkgpath, config), libname))

elif os.path.exists('main.c'):
	pgm = 'main'
	if osname == 'win':
		ccomp = [mstoolbin+"cl", '/I'+msvcincl, '/I'+msucrtinc, '/Fo'+builddir+'\\', '/c', '/W3', '/analyze-', '/sdl', '/Zc:inline', '/FC', '/nologo', '/EHsc']
		if config == 'release':
		  ccomp = ccomp + ['/Gy','/O2', '/Oi', '/MD']
		elif config == 'debug':
		  ccomp = ccomp + ['/MDd', '/Od']
	print(ccomp)
	rc = call(ccomp + [pgm+'.c'])
	if rc != 0:
	  sys.exit(rc)
	objlist.append(os.path.join(builddir, pgm + objext))
	sys.exit(0)

# Linkedit everything
if config != 'web':
  exename = os.path.join(builddir, project + exeext)
  if osname == 'win':
	  tolink = [mstoolbin+"link", msucrtlib, msvclib, msumlib, "/LTCG", "/NOLOGO", "/OUT:"+exename]
	  # /MANIFEST /ManifestFile:"Debug\ConeTest.exe.intermediate.manifest" /MANIFESTUAC:"level='asInvoker' uiAccess='false'"
	  # /DEBUG:FASTLINK /PDB:"D:\sol\Cone\Debug\ConeTest.pdb" 
	  # it will include: "msvcrt.lib oldnames.lib kernel32.lib vcruntime.lib"
  else:
    tolink = ['gcc','-o',exename]
    os.environ['PATH'] = "/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
  tolink.extend(objlist)
  rc = call(tolink)
  if rc != 0:
    sys.exit(rc)

# Compile C
# llvm-lib main.obj  (llvm-ar rc main.a main.o)
